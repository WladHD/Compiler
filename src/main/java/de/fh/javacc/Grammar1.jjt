// @author https://stackoverflow.com/a/13921386
// TestParser.jjt
options {
    VISITOR = true;
    MULTI = true;
    IGNORE_CASE = false;
}

PARSER_BEGIN(TestParser)
package de.fh.javacc.generated;
public class TestParser {
  public static SimpleNode parse(java.io.InputStream is) throws ParseException {
      TestParser parser = new TestParser(is);
      return parser.compilationUnit(); // SimpleNode root = parser.program()
  }
}

PARSER_END(TestParser)

TOKEN : {
  <TypeSpecifiers: "int"| "char" | "String" | "boolean"| "Path"|  "Files" >|
  <MethodSpecifiers: <TypeSpecifiers> | "void"> |
    "while" | ";" | "=" | "(" | ")" | "<" | ">" | "!" | "{" | "}" | "--" | "++" | "," | "Map" | "Set"
  | <BinVergleich : ">="  | "<=" | "==" | "!=" >
  | <BinJunktor : "||" | "&&" >
  | <OpSum : "+" | "-">
  | <OpUnaer: <OpSum> | "!">
  | <OpProd : "*" | "/" | "%">
  | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])* >
  | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*) >
  | <DoubleLiteral : <IntegerLiteral> "." (["0"-"9"])* | "." (["0"-"9"])+ >
  | <StringLiteral: "\""(["A"-"Z", "a"-"z", "_", "0" - "9"])*"\"" > //ToDO vervollständigen
  | <CharLiteral:"\""(["A"-"Z", "a"-"z", "_", "0" - "9"])"\"" >//ToDO vervollständigen
}



SKIP : {   " " | "\t" | "\n" | "\r" | <Kommentar: "//" (~["\n"])* >
}

SimpleNode compilationUnit() #PROGRAM :
{
    boolean first = true;
    SimpleNode result = null; // Initialize the result
} {(
       (LOOKAHEAD(2) stmnt() | decl() | MethAufruf()) { if (first) result = jjtThis; else result.jjtAddChild(jjtThis, result.jjtGetNumChildren()); }
    )*
    { return result; } // Return the result
}
void MethAufruf() #CALL :
{
 Token t;
  Token end;
} {
  (t = <Identifier> "." Methode())
  {
  jjtThis.value = t.image;
  }
}
void Methode() #METH :
{
 Token t;

} {
  (t = <Identifier>  "(" [identifier() ("," identifier())*] ")" ";")
  {
  jjtThis.value = t.image;
  }
 }


void stmnt() #STMT :
{
  Token end;
} {
  block() | whileStmnt()  | ausdruck() end = ";"
}


void decl() #DECL :
{} {
 type() identifier() (Vardecl()) | Methtype() identifier() Methdecl()
}


void Vardecl() #VARDECL :
{} {
 ["=" ausdruck() ]";"
}
void Methdecl() #METHDECL :
{Token t;} {
 "(" params()  ")"  block()
}

void params() #PARAMS :
{

} {
   [type() identifier()("," type() identifier())*]
}

void Methtype() #TYPE :
{
  Token t;
}
{
  (t = <MethodSpecifiers> )
  {
      jjtThis.value = t.image;
  }
}

void type() #TYPE :
{
  Token t;
}
{
  (t = <TypeSpecifiers> | t = "Set" Set() | t = "Map" Map())
  {
      jjtThis.value = t.image;
  }
}

void Set() #Set :
{

}
{
  "<"  type() ">"
}
void Map() #Map :
{
}
{
   "<"  type() "," type() ">"
}

void identifier() #IDENTIFIER :
{
  Token t;
}
{
  t=<Identifier>
  {
    jjtThis.value = t.image;
  }
}

void block() #BLOCK :
{
    Token start, end;
} {
   start = "{" (
         (stmnt() | decl())
       )*
   end = "}"
}

void whileStmnt() #WHILE :
{
   Token start;
} {
  start = "while" "(" ausdruck() ")" stmnt()
}



void ausdruck() #EXPR :
{
   Token ident;
} {
  LOOKAHEAD(2) ident=<Identifier> "=" ausdruck()
  | junktoren()
}

void junktoren() #void :
{
    Token junktor;
} {
   vergleich() [(junktor=<BinJunktor> #JUNKTOREN junktoren())]
}

void vergleich() #void :
{
     Token op;
} {
   summe() [(op=<BinVergleich> | op=">" | op="<") #VERGLEICH vergleich()]
}

void summe() #void :
{
    Token op;
} {
    LOOKAHEAD(3)
    (produkt() op=<OpSum> {jjtThis.value = op.image;} summe()) #MATH_OP_ADDSUB
    | produkt()
}

void produkt() #void :
{
     Token op;
} {
    LOOKAHEAD(3)
    (unaer() op=<OpProd> {jjtThis.value = op.image;} produkt()) #MATH_OP_MULTDIV
    | unaer()
}

void unaer() #void :
{
   Token op;
} {
  ((op = <OpUnaer> | op = "!" ) #UNAER atom()) | atom()
}

void atom() #ATOM :
{
    Token ident = null;
    Token inc=null;
} {
  (ident=<Identifier> [inc="++"|inc="--"]
  | (inc = "++"| inc = "--") ident=<Identifier>
  | ident=<IntegerLiteral>
  | ident=<DoubleLiteral>
  | "(" ausdruck() ")" #void)
   {
      jjtThis.value = ident == null ? null : ident.image;
    }
}
