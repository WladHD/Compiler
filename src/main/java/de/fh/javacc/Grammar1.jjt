// @author https://stackoverflow.com/a/13921386
// TestParser.jjt
options {
    VISITOR = true;
    MULTI = true;
    IGNORE_CASE = false;
}

PARSER_BEGIN(TestParser)
package de.fh.javacc.generated;
public class TestParser {
  public static SimpleNode parse(java.io.InputStream is) throws ParseException {
      TestParser parser = new TestParser(is);
      return parser.compilationUnit(); // SimpleNode root = parser.program()
  }
}

PARSER_END(TestParser)

TOKEN : {
  "int" | "double" | "print" | "read" | "while" | ";" | "=" | "(" | ")" | "!" | "{" | "}" | "--" | "++"
  | <BinVergleich : ">=" | ">" | "<=" | "<" | "==" | "!=" >
  | <BinJunktor : "||" | "&&" >
  | <OpSum : ["+","-","*","/","%"]>
  | <OpProd : ["*","/","%"]>
  | <Identifier : ["A"-"Z", "a"-"z", "_"](["A"-"Z", "a"-"z", "_", "0" - "9"])* >
  | <IntegerLiteral : "0" | (["1"-"9"] (["0"-"9"])*) >
  | <DoubleLiteral : <IntegerLiteral> "." (["0"-"9"])* | "." (["0"-"9"])+ >
}



SKIP : {   " " | "\t" | "\n" | "\r" | <Kommentar: "//" (~["\n"])* >
}

SimpleNode compilationUnit() #PROGRAM :
{
    boolean first = true;
    SimpleNode result = null; // Initialize the result
} {
    (
        (stmnt() | decl()) { if (first) result = jjtThis; else result.jjtAddChild(jjtThis, result.jjtGetNumChildren()); }
    )*
    { return result; } // Return the result
}



void stmnt() #STMT :
{
  Token end;
} {
  (block() | whileStmnt() | printStmnt() | readStmnt() | (ausdruck() end = ";") { } )
  { }
}


void decl() #DECL :
{
   Token type, ident, end;
} {
  (type="int" | type="double") ident=<Identifier> ["=" ausdruck() ] end=";" { jjtThis.value = new Object[] {type, ident}; }
}

void block() #BLOCK :
{
    Token start, end;
} {
   start = "{" (
         (stmnt() | decl())  { }
       )*
   end = "}"
   { }
}

void whileStmnt() #WHILE :
{
   Token start;
} {
  start = "while" "(" ausdruck() ")" stmnt() { }
}

void printStmnt() #PRINT :
{
  Token start, end;
} {
  start = "print" ausdruck() end = ";" { }
}

void readStmnt() #READ :
{
   Token start, end, ident;
} {
  start ="read" ident=<Identifier> end=";"  { }
}

void ausdruck() #EXPR :
{
   Token ident;
} {
  (
   LOOKAHEAD(2) ident=<Identifier> "=" ausdruck()  { }
   | junktoren()
  ) { }
}

void junktoren() #JUNKTOREN :
{
    Token junktor;
} {
   vergleich() (junktor=<BinJunktor> vergleich() { } )* { }
}

void vergleich() #VERGLEICH :
{
     Token op;
} {
   summe() [op=<BinVergleich> summe()  { } ] { }
}

void summe() #SUMME :
{
    Token op;
} {
  produkt() (op=<OpSum> produkt() { })*  { }
}

void produkt() #PRODUKT :
{
     Token op;
} {
  unaer() (op=<OpProd> unaer() { })*  { }
}

void unaer() #UNAER :
{
   Token op;
} {
  (
   (op = <OpSum> | op = "!" ) unaer() { } | atom()
  ) { }
}

void atom() #ATOM :
{
    Token ident;
    Token inc=null;
} {
  (ident=<Identifier> [inc="++"|inc="--"] { }
  | (inc = "++"| inc = "--") ident=<Identifier>  { }
  | ident=<IntegerLiteral> { }
  | ident=<DoubleLiteral> { }
  | "(" ausdruck() ")"
  ) { }
}
